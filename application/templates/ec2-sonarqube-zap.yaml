AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template creates a EC2 instance and deploys open source 
  tools SonarQube and OWASP Zap. Please note, you will be billed 
  for the AWS resources used if you create a stack from this template.
  
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0742b4e673072066f
      HVMG2: ami-015f1226b535bd02d
    us-west-2:
      HVM64: ami-a0cfeed8
      HVMG2: ami-0e09505bc235aa82d
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
      HVMG2: ami-0a7c483d527806435
    eu-west-2:
      HVM64: ami-f976839e
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0ebc281c20e89ba4b
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0233214e13e500f77
      HVMG2: ami-06223d46a6d0661c7
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
      HVMG2: ami-053cdd503598e4a9d
    ap-northeast-2:
      HVM64: ami-0a10b2721688ce9d2
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-0d98120a9fb693f07
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
      HVMG2: ami-0be9df32ae9f92309
    ap-southeast-2:
      HVM64: ami-09b42976632b27e9b
      HVMG2: ami-0a9ce9fecc3d1daf8
    ap-south-1:
      HVM64: ami-0912f71e06545ad88
      HVMG2: ami-097b15e89dbdcfcf4
    us-east-2:
      HVM64: ami-05d72852800cbf29e
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      HVM64: ami-0b18956f
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-07b14488da8ea02a0
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-0a4eaf6c4454eda75
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-6b6a7d09
      HVMG2: NOT_SUPPORTED
Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - Configure
        Install:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: |
                <!DOCTYPE html>
                <html>
                <body>
                  "Hello world!!!!!!!"
                </body>
                </html>
              mode: 000644
              owner: "root"
              group: "root"
            /etc/httpd/conf/httpd.conf:
              content: |
                      ServerRoot "/etc/httpd"
                      Listen 80
                      <VirtualHost *:80>
                        ProxyPass / http://localhost:8085/
                        ProxyPassReverse / http://localhost:8085/
                      </VirtualHost>
                      Listen 81
                      <VirtualHost *:81>
                        ProxyPass / http://localhost:9000/
                        ProxyPassReverse / http://localhost:9000/
                      </VirtualHost>
                      Include conf.modules.d/*.conf
                      IncludeOptional conf.d/*.conf
                      User apache
                      Group apache
                      <Directory />
                          AllowOverride none
                          Require all denied
                      </Directory>

                      DocumentRoot "/var/www/html"

                      <Directory "/var/www">
                          AllowOverride None
                          Require all granted
                      </Directory>

                      CustomLog "logs/access_log" combined
                      ErrorLog "logs/error_log"
                      LogLevel warn

                      <IfModule alias_module>
                          ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
                      </IfModule>

                      <Directory "/var/www/cgi-bin">
                          AllowOverride None
                          Options None
                      Require all granted
                      </Directory>

                      <IfModule mime_module>
                        TypesConfig /etc/mime.types
                        AddType application/x-compress .Z
                        AddType application/x-gzip .gz .tgz
                        AddType text/html .shtml
                        AddOutputFilter INCLUDES .shtml
                      </IfModule>
                      AddDefaultCharset UTF-8
                      <IfModule mod_http2.c>
                        Protocols h2 h2c http/1.1
                      </IfModule>

              mode: 000644
              owner: "apache"
              group: "apache"
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # The interval used to check for changes to the resource metadata in minutes. Default is 15
                interval=2
              mode: 000400
              owner: "root"
              group: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
              mode: 000400
              owner: "root"
              group: "root"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          commands:
            start_sonar_qube:
              command: echo "test" > /home/ec2-user/ec2-echo.test
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
      
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
              #!/bin/bash -xe
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              # Get the latest CloudFormation package
              yum install -y aws-cfn-bootstrap
              yum install -y java-11-amazon-corretto
              yum install -y https://s3.us-east-2.amazonaws.com/amazon-ssm-us-east-2/latest/linux_amd64/amazon-ssm-agent.rpm
              yum install -y docker
              systemctl start amazon-ssm-agent
              systemctl status amazon-ssm-agent
              cd /home/ec2-user
              wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.7.1.42226.zip
              unzip sonarqube-8.7.1.42226.zip
              # sudo ln -s $SONAR_HOME/bin/linux-x86-64/sonar.sh /usr/bin/sonar
              # sudo chmod 755 /etc/init.d/sonar
              # sudo chkconfig --add sonar
              sed -i "s/#RUN_AS_USER=/RUN_AS_USER=ec2-user/g" /home/ec2-user/sonarqube-8.7.1.42226/bin/linux-x86-64/sonar.sh
              chown -R ec2-user:ec2-user /home/ec2-user/sonarqube-8.7.1.42226/
              /home/ec2-user/sonarqube-8.7.1.42226/bin/linux-x86-64/sonar.sh start &
              #sudo useradd zap && sudo usermod -a -G docker zap
              #### Installing Zap
              ## Starting docker service and creating user/group for owasp zap
              sudo service docker start && sudo useradd zap && sudo usermod -a -G docker zap
              ## Pulling owasp zap cdocker container from docker hub
              docker pull owasp/zap2docker-stable
              docker run -u zap -p 8085:8085 -i owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8085 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.key=workshopzapkey &
              ## Checking cfn init 
              /opt/aws/bin/cfn-init -s ${AWS::StackId} -r WebServerInstance --configsets InstallAndRun --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
              ## Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
              # /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
              # All done so signal success
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerInstance --region ${AWS::Region}

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 81
          ToPort: 81
          CidrIp: 0.0.0.0/0
Outputs:
  SonarQubeURL:
    Description: URL for newly created LAMP stack
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
        - ':81'
    Export:
      Name: SonarQubeURL
  OWASPZapURL:
    Description: URL for newly created LAMP stack
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
    Export:
      Name: OWASPZapURL